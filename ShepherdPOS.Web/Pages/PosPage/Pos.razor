@*=========================================================================================================================
===The concept for the code of thumbnail table display that used html and IEnumerable Linq database========================
===context products records query comes from the notion of asp.net core Blazor of add to cart pos==========================
===For more details, try this linkhttps://www.youtube.com/watch?v=sHuuo9L3e5c.=============================================
==For InvokeVoidAsync, try this linkhttps://visualstudiomagazine.com/articles/2018/02/01/invoking-view-components.aspx.====
==========================================================================================================================*@

@page "/pos"

@inject HttpClient Http
@inject IJSRuntime JsRuntime

<PageTitle>POS</PageTitle>
@*<MudText Typo="Typo.h5" Color="Color.Primary" Class="mt-4 mb-0">POS</MudText>*@

<div class="row ">
    <div class="col-md-2 g-1 justify-content-start">
        <MudText Typo="Typo.h5" Color="Color.Primary" Class="mt-4 mb-0">POS</MudText>
        <MudText Color="Color.Surface" Class="mb-4 ">Real time POS System </MudText>
    </div>
    <div class="col-md-3 text-end g-1 justify-content-end">
        <MudText Typo="Typo.h3" Color="Color.Warning" Class="mt-4 mb-0">@string.Format("{0:N2}", cart.AmountDue)</MudText>
    </div>
</div>


<MudGrid>
    <div class="row">
        <div class="col-md-5">
            <CartItemListPage Cart="cart" OnRemoveProduct="HandleRemoveProduct" OnAddPayment="HandleAddPayment" />
        </div>
        <div class="col-md-7">
            @*<div class="row justify-content-end">
                <div class="col-8 mb-3  ">
                    <input type="text" class="form-control" placeholder="Search by Product Name or Barcode" @bind:event="oninput">
                </div>
            </div>
            <div class="card" style="height: 700px; overflow-y: scroll;">
                <div class="card-body">

                    <div class="row row-cols-1 row-cols-md-3 g-4">
                        @foreach (var product in Products)
                        {
                            <div class="col">

                                <div class="card">
                                    <img class="img-thumbnail" src="@product.ImageURL">
                                    <div class="card-body">

                                        <MudText Typo="Typo.subtitle1" Class="card-title">
                                            @product.ProductName
                                        </MudText>

                                        <p class="card-text">
                                            <b>@product.SalePrice.ToString("C")</b>
                                        </p>
                                        <div>
                                            <button type="button" @onclick="() => SelectProduct(product)" class="btn btn-link">
                                                Add Item
                                            </button>
                                        </div>
                                    </div>
                                </div>

                            </div>
                        }
                    </div>
                </div>
            </div>*@
            <ProductSelection Products="allProducts" OnProductSelect="HandleProductSelect" />

        </div>
    </div>

</MudGrid>

@code {
    SelectProductView[]? allProducts;
    ExecuteHandleCartView cart = new();
    SelectProductView[]? RequestFilteredProducts;

    [Parameter] public SelectProductView[]? Products { get; set; }
    SelectProductView[]? filteredProducts = null;
    [Parameter] public EventCallback<SelectProductView> OnProductSelect { get; set; }

    protected override async Task OnInitializedAsync()
    {
        allProducts = await Http.GetFromJsonAsync<SelectProductView[]>("api/product");
        Products = allProducts;
    }

    //==================================
     private async Task HandleAddPayment(AppendPaymentDto AppendPaymentDto)
    {
        StartPosDto StartPosDto = new() { Cart = cart, Payment = AppendPaymentDto };
        await Http.PostAsJsonAsync<StartPosDto>("api/Sale", StartPosDto);
        cart = new();
    }

    public string tMountPos(string amount)
    {
        return amount;
    }


    private void SelectProductByNameOrByBarcode(string filterName)
    {
        filteredProducts = Products!.Where(p => p.ProductName.Contains(filterName)).ToArray();
    }

    private async Task SelectProduct(SelectProductView product)
    {
        await OnProductSelect.InvokeAsync(product);

    }

    //==============================================
    private async Task HandleProductSelect(SelectProductView product)
    {
        CartQuantityRequestDto CartQuantityRequestDto = new()
        {
            ProductId = product.Id,
            CartQuantity = cart.ProductQuantity(product.Barcode)
        };

        var response = await Http.PostAsJsonAsync<CartQuantityRequestDto>("api/checkstocksale/request", CartQuantityRequestDto);
        var canBook = await response.Content.ReadFromJsonAsync<bool>();

        if (canBook)
            cart.AppendToCart(product);
        else
            await JsRuntime.InvokeVoidAsync("alert", "Unable to add to cart, insufficient stock.");
    }

    private void HandleRemoveProduct(SelectProductView product)
    {
        cart.DeleteFromCart(product);
    }

   
}
