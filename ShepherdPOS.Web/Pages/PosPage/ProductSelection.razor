
<div class="row justify-content-end">
    <div class="col-8 mb-3  ">
        <input type="text" class="form-control" placeholder="Search by Product Name or Barcode" @bind:event="oninput">
    </div>
</div>
<div class="card" style="height: 700px; overflow-y: scroll;">
    <div class="card-body">

        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var product in Products)
            {
                <div class="col">

                    <div class="card">
                        <img class="img-thumbnail" src="@product.ImageURL">
                        <div class="card-body">

                            <MudText Typo="Typo.subtitle1" Class="card-title">
                                @product.ProductName
                            </MudText>

                            <p class="card-text">
                                <b>@product.SalePrice.ToString("C")</b>
                            </p>
                            <div>
                                <button type="button" @onclick="() => SelectProduct(product)" class="btn btn-link">
                                    Add Item
                                </button>
                            </div>
                        </div>
                    </div>

                </div>
            }
        </div>        
    </div>
</div>

@code {
    [Parameter] public ProductGroupView[]? ProductCategories { get; set; }
    [Parameter] public SelectProductView[]? Products { get; set; }
    [Parameter] public EventCallback<SelectProductView> OnProductSelect { get; set; }

    ProductGroupView? selectedProductCategory = null;
    SelectProductView[]? filteredProducts = null;
    List<string> CategoryList = new List<string>();

    protected override async Task OnInitializedAsync()
    {

        @foreach (var productCategory in ProductCategories)
            CategoryList.Add(productCategory.Id +":" + productCategory.CategoryName );

        //foreach (var productCategory in ProductCategories)
        //{
        //    SelectProductCategory(productCategory);
        //    break;
        //}

    }


    private void SelectProductCategory(ProductGroupView productCategory)
    {
        selectedProductCategory = productCategory;
        filteredProducts = Products!.Where(p => p.ProductCategoryId == selectedProductCategory.Id).ToArray();
    }

    private void ClearProductCategory()
    {
        filteredProducts = null;
        selectedProductCategory = null;
    }

    private async Task SelectProduct(SelectProductView product)
    {
        await OnProductSelect.InvokeAsync(product);

    }
    }