@*======================================================*@
@*https://mudblazor.com*@
@*Sample code UI component from mudblazor framework*@
@*=====================================================*@
@*=====================================================*@

@page "/ThemeComponent"
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations


<MudText Typo="Typo.h5" Color="Color.Primary" Class="mt-4 mb-2">UI Component</MudText>
<MudText Color="Color.Surface" Class="mb-4"> Material Design UI Component</MudText>

<MudTabs Elevation="25" Color="Color.Transparent" Rounded="true" PanelClass="mt-6">
    <MudTabPanel Text="">

        <MudCard Elevation="25">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Dialog Box</MudText>
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent>

                <MudButton Color="Color.Primary" @onclick="@(() => Snackbar.Add("The reactor type is RBMK-1000", Severity.Normal))">Success DialogBox</MudButton>
                <MudButton Color="Color.Secondary" @onclick="@(() => Snackbar.Add("The reactor is running at optimum temperature", Severity.Success))">Info DialogBox</MudButton>
                <MudButton Color="Color.Warning" @onclick="@(() => Snackbar.Add("The reactor was fired up successfully", Severity.Warning))">Warning DialogBox</MudButton>
                <MudButton Color="Color.Error" @onclick="@(() => Snackbar.Add("Reactor meltdown is imminent", Severity.Error))">Error Snackbar</MudButton>
                <MudButton Color="Color.Dark" @onclick="@(() => Snackbar.Add("The reactor temperature exceeds the optimal range", Severity.Warning))">Normal DialogBox</MudButton>

            </MudCardContent>
        </MudCard>

        @*//Button Design ==========================*@
        <MudCard Elevation="25">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Icon and Label Button Design</MudText>
                    <MudText Color="Color.Surface" Class="mb-4"> You can use the Variant parameter to make a  Mudbutton look exactly like the default button design.</MudText>
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent>

                <MudButton class="m-2" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Add" Color="Color.Primary">Add</MudButton>
                <MudButton class="m-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary">Edit</MudButton>
                <MudButton class="m-2" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" Color="Color.Primary" Disabled="true">Edit</MudButton>
                <MudButton class="m-2" Variant="Variant.Filled" Color="Color.Secondary" Size="Size.Small">Save</MudButton>
                <MudButton class="m-2" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>

            </MudCardContent>
        </MudCard>

        @*//Dialog box ==========================*@
        @*<MudCard Elevation="25" Class="mt-6">
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Templating and Passing Simple Data</MudText>
                        <MudText Color="Color.Surface" Class="mb-4"> It will demonstrate how the dialog box created and reuse it for multiple purposes..</MudText>
                    </CardHeaderContent>
                </MudCardHeader>

                <MudCardContent>
                    <MudButton class="m-2 mb-6" @onclick="SaveRecord" Variant="Variant.Filled" Color="Color.Primary">Save Record</MudButton>
                    <MudButton class="m-2 mb-6" @onclick="ConfirmRecord" Variant="Variant.Filled" Color="Color.Secondary">Confirm</MudButton>
                    <MudButton class="m-2 mb-6" @onclick="DeleteUser" Variant="Variant.Filled" Color="Color.Error">Delete</MudButton>
                </MudCardContent>
            </MudCard>*@


        @*//Avatar ==========================*@
        <MudCard Elevation="25" Class="mt-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">MudAvatar</MudText>
                    <MudText Color="Color.Surface" Class="mb-1"> Simple avatars, normally used to display text and it can be colored with the Color class property.</MudText>
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent>
                <MudAvatar class="m-2 mb-6" Color="Color.Dark">R</MudAvatar>
                <MudAvatar class="m-2 mb-6" Color="Color.Primary">R</MudAvatar>
                <MudAvatar class="m-2 mb-6" Color="Color.Secondary">R</MudAvatar>

            </MudCardContent>
        </MudCard>


        @*//Textfield ==========================*@
        <MudCard Elevation="25" Class="mt-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Basic Text Field's</MudText>
                    <MudText Color="Color.Surface" Class="mb-1"> The height of the text field can be lowered using the margin prop.</MudText>
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent>
                <MudTextField class="m-2" @bind-Value="TextValue" Label="Standard" Variant="Variant.Text" Margin="Margin.Dense"></MudTextField>
                <MudTextField class="m-2" @bind-Value="TextValue" Label="Filled" Variant="Variant.Filled" Margin="Margin.Dense"></MudTextField>
                <MudTextField class="m-2 mb-6" @bind-Value="TextValue" Label="Outlined" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
            </MudCardContent>
        </MudCard>


        @*//Mask Property ==========================*@
        <MudCard Elevation="25" Class="mt-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Mask Textfield</MudText>
                    <MudText Color="Color.Surface" Class="mb-1"> While the user is still typing, the text field will immediately apply any necessary formatting rules or input constraints.</MudText>
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent class="mb-6">
                <MudGrid Class="justify-space-between" Style="max-width: 400px;">
                    <MudItem xs="12">
                        <MudTextField Mask="@(new PatternMask("0000 0000 0000 0000"))" Label="Credit Card Number"
                                      @bind-Value="creditCard" Variant="@Variant.Text" Clearable />
                    </MudItem>
                    <MudItem xs="4">
                        <MudTextField Mask="@(new DateMask("MM/YY", 'Y', 'M'))" Label="Expires"
                                      @bind-Value="expiration" Variant="@Variant.Text" />
                    </MudItem>
                    <MudItem xs="4" />
                    <MudItem xs="4">
                        <MudTextField Mask="@(new PatternMask("000"))" Label="CVC"
                                      @bind-Value="cvc" Variant="@Variant.Text" />
                    </MudItem>
                    <MudItem xs="12" class="mb-4">
                        Credit Card Number: <b>@creditCard</b><br />
                        Expiration Date: <b>@expiration</b><br />
                        CVC: <b>@cvc</b>
                    </MudItem>
                </MudGrid>

            </MudCardContent>
        </MudCard>

        @*//Form Validation ==========================*@
        <MudCard Elevation="25" Class="mt-6">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">MudForm Validation, MudRadio and MudCheckBox Componet</MudText>
                    <MudText Color="Color.Surface" Class="mb-1"> Apply MudForm validation parameter of your input controls. MudBlazor's input components are compatible with Blazor's form validation if they are placed within a MudTextField> control.</MudText>
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent class="mb-6">
                <MudGrid>
                    <MudItem xs="12" sm="7">
                        <MudPaper Class="pa-4">
                            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                                <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" />
                                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" />
                                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                                              InputType="InputType.Password"
                                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                              RequiredError="Password is required!" />
                                <MudTextField T="string"
                                              Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                                              Validation="@(new Func<string, string>(PasswordMatch))" />
                                <div class="d-flex">
                                    <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                                        <MudRadio Option="@("Personal")">Personal</MudRadio>
                                        <MudRadio Option="@("Professional")">Professional</MudRadio>
                                    </MudRadioGroup>
                                </div>
                                <div class="d-flex align-center justify-space-between">
                                    <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Label="I agree!" />
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" Class="ml-auto">Register</MudButton>
                                </div>
                            </MudForm>
                        </MudPaper>
                        <MudPaper Class="pa-4 mt-4">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@(()=>form.Validate())">Validate</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@(()=>form.Reset())" Class="mx-2">Reset</MudButton>
                            <MudButton Variant="Variant.Filled" DisableElevation="true" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12" sm="5">
                        <MudPaper Class="pa-4 mud-height-full">
                            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                            @foreach (var error in errors)
                            {
                                <MudText Color="@Color.Error">@error</MudText>
                            }
                        </MudPaper>
                    </MudItem>
                </MudGrid>

            </MudCardContent>
        </MudCard>


        @*//DatePicker Form ==========================*@
        <MudCard Elevation="25" Class="mt-6 mb-10">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Automatically set Labels with MudDatePicker Component</MudText>
                    <MudText Color="Color.Surface" Class="mb-1"> Using MudDatePicker, the Label of a form field can be determined automatically by appending the [Label] attribute to the corresponding property in the model class.</MudText>
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent Class="mb-6">
                <MudForm>
                    <MudCardContent>
                        <MudDatePicker For="@(() => model.Date)" />
                        <MudDatePicker For="@(() => model.Date)" Label="Parameter Label" />
                        <MudSwitch For="@(() => model.Boolean)" />
                        <MudSwitch For="@(() => model.Boolean)" Label="Parameter Label" />
                        <MudTextField For="@(() => model.String)" />
                        <MudTextField For="@(() => model.String)" Label="Parameter Label" />
                    </MudCardContent>
                </MudForm>

            </MudCardContent>
        </MudCard>

    </MudTabPanel>


</MudTabs>

@code {
    @*//DatePicker Form ==========================*@
    DisplayNameLabelClass model = new();

    public class DisplayNameLabelClass
    {
        [Label("Date LabelAttribute")]
        public DateTime? Date { get; set; }
        [Label("Boolean LabelAttribute")]
        public bool Boolean { get; set; }
        [Label("String LabelAttribute")]
        public string String { get; set; }
    }
    @*//Form Validation ==========================*@

    bool success;
    string[] errors = { };
    MudTextField<string> pwField1;
    MudForm form;

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return null;
    }

    @*//Mask Property ==========================*@
    private string creditCard;
    private string expiration;
    private string cvc;

    @*//Textfield ==========================*@
    public string TextValue { get; set; }

    //Dialog box ==========================
    private void DeleteUser()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Do you really want to delete these records? This process cannot be undone.");
        parameters.Add("ButtonText", "Delete");
        parameters.Add("Color", Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        DialogService.Show<DialogTheme>("Delete", parameters, options);
    }

    private void SaveRecord()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Record saved.");
        parameters.Add("ButtonText", "Yes");
        parameters.Add("Color", Color.Primary);

        DialogService.Show<DialogTheme>("Confirm", parameters);
    }

    private void ConfirmRecord()
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Click confirm to continue the process.");
        parameters.Add("ButtonText", "Download");
        parameters.Add("Color", Color.Secondary);

        DialogService.Show<DialogTheme>("Slow Computer Detected", parameters);
    }
    // End dialog box statement============
}

