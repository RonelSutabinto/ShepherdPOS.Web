@*======================================================*@
@*https://mudblazor.com*@
@*UI component from mudblazor framework*@
@*=====================================================*@
@*=====================================================*@


@page "/ThemeTable"

@using ShepherdPOS.Models.DataTO
@using System.Net.Http.Json
@inject HttpClient httpClient
@*@inherits ProductsBase*@

<MudText Typo="Typo.h5" Color="Color.Primary" Class="mt-4 mb-2">Table</MudText>
<MudText Color="Color.Surface" Class="mb-4"> Server Side Filtering, Sorting and Pagination</MudText>

<MudTabs Elevation="25" Color="Color.Transparent" Rounded="true" PanelClass="mt-6">


    <MudTabPanel Text="Thumbnail Images">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Record Type Support Single Selection/Group of Record</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        <MudCardContent>
            @*@if (Products == null && ErrorMessage == null)
            {
                <DisplaySpinner />

            }
            else
            {
                <h3 class="mb-5">Products</h3>

                var productCount = Products.Count();

                @if (productCount > 0)
                {
                    @foreach (var prodGroup in GetGroupedProductsByCategory())
                    {
                        <h4>@GetCategoryName(prodGroup)</h4>

                        <div class="row mt-3">
                            <DisplayProducts Products="@prodGroup.Take(4)"></DisplayProducts>
                        </div>
                        <hr class="mb-3" />
                    }

                }

            }*@
        </MudCardContent>
    </MudTabPanel>

    <MudTabPanel Text="Server Side Data Retrieval">

        <MudCard Elevation="25">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Load data from the backend that is filtered</MudText>
                </CardHeaderContent>
            </MudCardHeader>

            <MudCardContent>
                <MudGrid Class="m-6">
                    <MudTable ServerData="@(new Func<TableState, Task<TableData<ProductDto>>>(ServerReload))"
                              Dense="true" Hover="true" @ref="table">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Periodic Elements</MudText>
                            <MudSpacer />
                            <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>
                        <HeaderContent>
                            <MudTh><MudTableSortLabel SortLabel="Id_field" T="ProductDto">ID</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortLabel="Name_field" T="ProductDto">Name</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortLabel="Description_field" T="ProductDto">Description</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortLabel="ImageURL_field" T="ProductDto">ImageURL</MudTableSortLabel></MudTh>
                            <MudTh><MudTableSortLabel SortLabel="CategoryName_field" T="ProductDto">Category Name</MudTableSortLabel></MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="ID">@context.Id</MudTd>
                            <MudTd DataLabel="Name">@context.Name</MudTd>
                            <MudTd DataLabel="Description">@context.Description</MudTd>
                            <MudTd DataLabel="ImageURL">@context.ImageURL</MudTd>
                            <MudTd DataLabel="Category Name">@context.CategoryName</MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText>No matching records found</MudText>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudText>Loading...</MudText>
                        </LoadingContent>
                        <PagerContent>
                            <MudTablePager />
                        </PagerContent>
                    </MudTable>
                </MudGrid>

            </MudCardContent>
        </MudCard>
    </MudTabPanel>


</MudTabs>

@code {
    private IEnumerable<ProductDto> pagedData;
    private MudTable<ProductDto> table;

    private int totalItems;
    private string searchString = null;

    /// <summary>
    /// Here we simulate getting the paged, filtered and ordered data from the server
    /// </summary>
    private async Task<TableData<ProductDto>> ServerReload(TableState state)
    {
        IEnumerable<ProductDto> data = await httpClient.GetFromJsonAsync<List<ProductDto>>("api/periodictable");
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(searchString))
                return true;
            if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            //if ($"{element.CategoryName} {element.Position} {element.Molar}".Contains(searchString))
            //    return true;
            return false;
        }).ToArray();
        totalItems = data.Count();
        switch (state.SortLabel)
        {
            case "nr_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Id);
                break;
            case "sign_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
            case "position_field":
                data = data.OrderByDirection(state.SortDirection, o => o.CategoryId);
                break;
            case "mass_field":
                data = data.OrderByDirection(state.SortDirection, o => o.ImageURL);
                break;
        }

        pagedData = data.Skip(state.Page * state.PageSize).Take(state.PageSize).ToArray();
        return new TableData<ProductDto>() { TotalItems = totalItems, Items = pagedData };
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table.ReloadServerData();
    }
}
