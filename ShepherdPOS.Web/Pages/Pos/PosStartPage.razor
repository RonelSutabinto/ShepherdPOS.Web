@page "/PosStart"
@inject HttpClient Http
@inject IJSRuntime JsRuntime

<PageTitle>Start Pos</PageTitle>

<h2>Lines | Payments</h2>

<div class="row">
    <div class="col-md-5">
        <CartList Cart="PosCart"
                     OnRemoveProduct="RemoveProduct"
                     OnAddPayment="PurchasePayment" />
    </div>
    <div class="col-md-7">
        <ItemSelection ProductCategories="_ProductCategories"
                          Products="_Products"
                          OnProductSelect="ProductSelect" />
    </div>
</div>

@code {
    ProductGroupView[]? _ProductCategories;
    ProductView[]? _Products;
    PosCart poscart = new();

    protected override async Task OnInitializedAsync()
    {
        _ProductCategories = await Http.GetFromJsonAsync<ProductGroupView[]>("api/productcategory");
        _Products = await Http.GetFromJsonAsync<ProductView[]>("api/product");
    }

    private async Task ProductSelect(ProductView product)
    {
        GetStockDto stockDto = new()
        {
            ProductId = product.Id,
            CartQuantity = poscart.ProductQuantity(product.Code)
        };

        var response = await Http.PostAsJsonAsync<GetStockDto>("api/stock/request", stockDto);
        var canBook = await response.Content.ReadFromJsonAsync<bool>();

        if (canBook)
            poscart.AddToCart(product);
        else
            await JsRuntime.InvokeVoidAsync("alert", "Unable to add to cart, out of stock.");
    }

    private void RemoveProduct(ProductView product)
    {
        poscart.RemoveFromCart(product);
    }

    private async Task PurchasePayment(PaymentDto paymentDTO)
    {
        ResetSaleDto resetSaleDto = new() { PosCart = poscart, Payment = paymentDTO };
        await Http.PostAsJsonAsync<ResetSaleDto>("api/sale", resetSaleDto);
        poscart = new();
    }
}